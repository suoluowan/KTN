[01/19 16:50:18] detectron2 INFO: Rank of current process: 2. World size: 4
[01/19 16:50:19] detectron2 INFO: Environment info:
----------------------  ------------------------------------------------------------------------
sys.platform            linux
Python                  3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56) [GCC 7.2.0]
numpy                   1.14.3
detectron2              0.2 @/home/sunjunyao/KTN/detectron2
Compiler                GCC 5.4
CUDA compiler           CUDA 10.2
detectron2 arch flags   sm_61
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.0 @/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             GeForce GTX 1080 Ti
CUDA_HOME               /usr/local/cuda
Pillow                  8.0.1
torchvision             0.9.0 @/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
fvcore                  0.1.5.post20211023
cv2                     4.5.5
----------------------  ------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2018.0.2 Product Build 20180127 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[01/19 16:50:19] detectron2 INFO: Command line arguments: Namespace(config_file='projects/KTNv2/configs/densepose_rcnn_R_50_KTNv2.yaml', dist_url='tcp://127.0.0.1:50174', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', 'work_dirs/densepose_rcnn_R_50_KTNv2'], resume=False)
[01/19 16:50:19] detectron2 INFO: Contents of args.config_file=projects/KTNv2/configs/densepose_rcnn_R_50_KTNv2.yaml:
_BASE_: "./Base-DensePose-RCNN-FPN.yaml"
MODEL:
  KEYPOINT_ON: True 
  DENSEPOSE_ON: True
  WEIGHTS: "./pretrained_weights/R50-MIDv2-kpt.pth"
  ROI_HEADS:
    NAME: "DensePoseKTNv2Heads"
  ROI_DENSEPOSE_HEAD:
    NAME: "DensePoseKTNHead"
    PREDICTOR: "DensePoseKTNv2PredictorV3"
    KPT_ON: True
    KPT_CLASSIFIER_WEIGHT_DIR: "pretrained_weights/KTN_models/keypoints_kpt_classifier_weights.pkl"
    KPT_SURF_RELATION_DIR: "pretrained_weights/KTN_models/kpt_surface_relationships.pkl"
    POOLER_RESOLUTION: 28
    HEATMAP_SIZE: 112
    UP_SCALE: 2
    KPT_UP_SCALE: 2
    INDEX_WEIGHTS: 2.0
    FG_IOU_THRESHOLD: 0.65
    FG_MASK_THRESHOLD: 0.3
    DECODER_MULTI_SCALE_ON: True
  ROI_KEYPOINT_HEAD:
    LOSS_WEIGHT: 0.1
SOLVER:
  MAX_ITER: 130000
  STEPS: (100000, 120000)
  IMS_PER_BATCH: 16
  BASE_LR: 0.01
  CHECKPOINT_PERIOD: 10000

DATASETS:
  TRAIN: ("densepose_coco_2014_train", "densepose_coco_2014_valminusminival",)

VERSION: 2
[01/19 16:50:19] detectron2 INFO: Running with full config:
BOOTSTRAP_DATASETS: []
BOOTSTRAP_MODEL:
  DEVICE: cuda
  WEIGHTS: 
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  CATEGORY_MAPS:
    
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('densepose_coco_2014_minival',)
  TRAIN: ('densepose_coco_2014_train', 'densepose_coco_2014_valminusminival')
  WHITELISTED_CATEGORIES:
    
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  ROTATION_ANGLES: [0]
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DENSEPOSE_ON: True
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  HRNET:
    HRFPN:
      OUT_CHANNELS: 256
    STAGE2:
      BLOCK: BASIC
      FUSE_METHOD: SUM
      NUM_BLOCKS: [4, 4]
      NUM_BRANCHES: 2
      NUM_CHANNELS: [32, 64]
      NUM_MODULES: 1
    STAGE3:
      BLOCK: BASIC
      FUSE_METHOD: SUM
      NUM_BLOCKS: [4, 4, 4]
      NUM_BRANCHES: 3
      NUM_CHANNELS: [32, 64, 128]
      NUM_MODULES: 4
    STAGE4:
      BLOCK: BASIC
      FUSE_METHOD: SUM
      NUM_BLOCKS: [4, 4, 4, 4]
      NUM_BRANCHES: 4
      NUM_CHANNELS: [32, 64, 128, 256]
      NUM_MODULES: 3
    STEM_INPLANES: 64
  KEYPOINT_ON: True
  LOAD_PROPOSALS: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    SCALE: 4
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_DENSEPOSE_HEAD:
    BODY_MASK_WEIGHTS: 5.0
    COARSE_SEGM_TRAINED_BY_MASKS: False
    CONV_HEAD_DIM: 512
    CONV_HEAD_KERNEL: 3
    DECODER_COMMON_STRIDE: 4
    DECODER_CONV_DIMS: 256
    DECODER_MULTI_SCALE_ON: True
    DECODER_NORM: 
    DECODER_NUM_CLASSES: 256
    DECODER_ON: True
    DECONV_KERNEL: 4
    DEEPLAB:
      NONLOCAL_ON: 0
      NORM: GN
    FG_IOU_THRESHOLD: 0.65
    FG_MASK_THRESHOLD: 0.3
    HEATMAP_SIZE: 112
    INDEX_WEIGHTS: 2.0
    KPT_CLASSIFIER_WEIGHT_DIR: pretrained_weights/KTN_models/keypoints_kpt_classifier_weights.pkl
    KPT_ON: True
    KPT_SURF_RELATION_DIR: pretrained_weights/KTN_models/kpt_surface_relationships.pkl
    KPT_UP_SCALE: 2
    LOWRES_LOSS:
      ENABLED: False
      LOWRES_WEIGHTS: 0.1
    MIXUP:
      ALPHA: 0.5
      ENABLED: False
      WEIGHTS_DECAY: 0.01
    NAME: DensePoseKTNHead
    NUM_COARSE_SEGM_CHANNELS: 2
    NUM_PATCHES: 24
    NUM_STACKED_CONVS: 8
    PART_WEIGHTS: 1.0
    POINT_REGRESSION_WEIGHTS: 0.01
    POOLER_RESOLUTION: 28
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
    PREDICTOR: DensePoseKTNv2PredictorV3
    RES2:
      GN: False
      SCALE: 4
    SEGM_CONFIDENCE:
      ENABLED: False
      EPSILON: 0.01
    TRIPLET_LOSS:
      ENABLED: False
      MARGIN: 1.0
      USE_XY_DIST: False
      WEIGHTS: 0.1
    UP_SCALE: 2
    UV_CONFIDENCE:
      ENABLED: False
      EPSILON: 0.01
      TYPE: iid_iso
    UV_LOSS_WITH_WEIGHTS:
      U:
        ENABLED: False
        W0: 3
        W1: 3
        X1: 0.1
        X2: 0.7
      V:
        ENABLED: False
        W0: 6
        W1: 4
        X1: 0.2
        X2: 0.8
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: DensePoseKTNv2Heads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 1
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 0.1
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: ./pretrained_weights/R50-MIDv2-kpt.pth
OUTPUT_DIR: work_dirs/densepose_rcnn_R_50_KTNv2
SEED: -1
SOLVER:
  BASE_LR: 0.01
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 10000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 130000
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (100000, 120000)
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
    ROTATION_ANGLES: ()
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[01/19 16:50:19] detectron2.utils.env INFO: Using a generated random seed 19782405
[01/19 16:50:25] detectron2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): DensePoseKTNv2Heads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=2, aligned=False)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=2, aligned=False)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=2, aligned=False)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=2, aligned=False)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (decoder): None
    (densepose_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=2, aligned=False)
      )
    )
    (densepose_head): DensePoseKTNHead(
      (ScaleConvs): ScaleConvs(
        (conv1): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (norms): ModuleList(
          (0): GroupNorm(32, 256, eps=1e-05, affine=True)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (project): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU()
        )
      )
      (ScaleConv): ScaleConvs(
        (conv1): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (norms): ModuleList(
          (0): GroupNorm(32, 256, eps=1e-05, affine=True)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (project): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU()
        )
      )
      (body_conv_fcn1): Conv2d(
        256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn2): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn3): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn4): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn5): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn6): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn7): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn8): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
    )
    (densepose_predictor): DensePoseKTNv2PredictorV3(
      (i_lowres): ConvTranspose2d(512, 25, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (u_lowres): ConvTranspose2d(512, 25, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (v_lowres): ConvTranspose2d(512, 25, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (ann_index_lowres): ConvTranspose2d(512, 15, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (m_lowres): ConvTranspose2d(512, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (parameter_transformer): Sequential(
        (0): Linear(in_features=17408, out_features=8192, bias=True)
        (1): LeakyReLU(negative_slope=0.02)
        (2): Linear(in_features=8192, out_features=8192, bias=True)
      )
    )
    (mid_decoder): MultiInstanceDecoder(
      (bottom_up_p2): FeatureAdaptation(
        (adt_conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (bottom_up_p3): FeatureAdaptation(
        (adt_conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (bottom_up_p4): FeatureAdaptation(
        (adt_conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (p2): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (p3): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (2): PixelShuffle(upscale_factor=2)
      )
      (p4): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (2): PixelShuffle(upscale_factor=2)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (5): PixelShuffle(upscale_factor=2)
      )
      (p5): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (2): PixelShuffle(upscale_factor=2)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (5): PixelShuffle(upscale_factor=2)
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (8): PixelShuffle(upscale_factor=2)
      )
      (trident_convs): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (1): ASPPConv(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (2): ASPPConv(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (3): ASPPConv(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
      )
      (predictor): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[01/19 16:50:25] densepose.data.dataset_mapper INFO: DensePose-specific augmentation used in training: RandomRotation(angle=[0], expand=False, sample_style='choice')
[01/19 16:50:40] densepose.data.datasets.coco INFO: Loading datasets/coco/annotations/densepose_train2014.json takes 14.11 seconds.
[01/19 16:50:40] densepose.data.datasets.coco INFO: Dataset densepose_coco_2014_train categories: [{'supercategory': 'person', 'id': 1, 'name': 'person', 'keypoints': ['nose', 'left_eye', 'right_eye', 'left_ear', 'right_ear', 'left_shoulder', 'right_shoulder', 'left_elbow', 'right_elbow', 'left_wrist', 'right_wrist', 'left_hip', 'right_hip', 'left_knee', 'right_knee', 'left_ankle', 'right_ankle'], 'skeleton': [[16, 14], [14, 12], [17, 15], [15, 13], [12, 13], [6, 12], [7, 13], [6, 7], [6, 8], [7, 9], [8, 10], [9, 11], [2, 3], [1, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7]]}]
[01/19 16:50:40] densepose.data.datasets.coco INFO: Loaded 26437 images in COCO format from datasets/coco/annotations/densepose_train2014.json
[01/19 16:50:46] densepose.data.datasets.coco INFO: Loading datasets/coco/annotations/densepose_valminusminival2014.json takes 3.67 seconds.
[01/19 16:50:46] densepose.data.datasets.coco INFO: Dataset densepose_coco_2014_valminusminival categories: [{'supercategory': 'person', 'id': 1, 'keypoints': ['nose', 'left_eye', 'right_eye', 'left_ear', 'right_ear', 'left_shoulder', 'right_shoulder', 'left_elbow', 'right_elbow', 'left_wrist', 'right_wrist', 'left_hip', 'right_hip', 'left_knee', 'right_knee', 'left_ankle', 'right_ankle'], 'name': 'person', 'skeleton': [[16, 14], [14, 12], [17, 15], [15, 13], [12, 13], [6, 12], [7, 13], [6, 7], [6, 8], [7, 9], [8, 10], [9, 11], [2, 3], [1, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7]]}]
[01/19 16:50:46] densepose.data.datasets.coco INFO: Loaded 5984 images in COCO format from datasets/coco/annotations/densepose_valminusminival2014.json
[01/19 16:50:48] detectron2.data.build INFO: Distribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
|   person   | 98816        |
|            |              |[0m
[01/19 16:50:48] detectron2.data.build INFO: Distribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
|   person   | 24640        |
|            |              |[0m
[01/19 16:50:49] detectron2.data.common INFO: Serializing 32421 elements to byte tensors and concatenating them all ...
[01/19 16:50:52] detectron2.data.common INFO: Serialized dataset takes 446.10 MiB
[01/19 16:50:52] densepose.data.build INFO: Using training sampler TrainingSampler
[01/19 16:51:00] fvcore.common.checkpoint INFO: [Checkpointer] Loading from ./pretrained_weights/R50-MIDv2-kpt.pth ...
[01/19 16:51:00] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mid_decoder.p5.4.weight' to the model due to incompatible shapes: (256, 256, 3, 3) in the checkpoint but (1024, 256, 1, 1) in the model! You might want to double check if this is expected.
[01/19 16:51:00] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mid_decoder.p5.4.bias' to the model due to incompatible shapes: (256,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[01/19 16:51:00] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mid_decoder.predictor.weight' to the model due to incompatible shapes: (256, 256, 1, 1) in the checkpoint but (256, 1024, 1, 1) in the model! You might want to double check if this is expected.
[01/19 16:51:00] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.densepose_head.ScaleConv.conv1.0.weight[0m
[34mroi_heads.densepose_head.ScaleConv.conv1.1.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConv.norms.0.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConv.norms.1.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConv.norms.2.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConv.project.0.weight[0m
[34mroi_heads.densepose_head.ScaleConv.weight[0m
[34mroi_heads.densepose_head.ScaleConvs.conv1.0.weight[0m
[34mroi_heads.densepose_head.ScaleConvs.conv1.1.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConvs.norms.0.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConvs.norms.1.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConvs.norms.2.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConvs.project.0.weight[0m
[34mroi_heads.densepose_head.ScaleConvs.weight[0m
[34mroi_heads.densepose_head.body_conv_fcn1.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn2.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn3.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn4.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn5.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn6.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn7.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn8.norm.{bias, weight}[0m
[34mroi_heads.densepose_predictor.ann_index_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.i_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.m_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.parameter_transformer.0.{bias, weight}[0m
[34mroi_heads.densepose_predictor.parameter_transformer.2.{bias, weight}[0m
[34mroi_heads.densepose_predictor.u_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.v_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.{bbox_surface_transfer_matrix, body_kpt_bias, body_kpt_weight, kpt_surface_transfer_matrix, part_surface_transfer_matrix}[0m
[34mroi_heads.mid_decoder.bottom_up_p2.adt_conv.{bias, weight}[0m
[34mroi_heads.mid_decoder.bottom_up_p3.adt_conv.{bias, weight}[0m
[34mroi_heads.mid_decoder.bottom_up_p4.adt_conv.{bias, weight}[0m
[34mroi_heads.mid_decoder.p3.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.p4.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.p4.3.{bias, weight}[0m
[34mroi_heads.mid_decoder.p4.4.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.3.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.4.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.6.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.7.{bias, weight}[0m
[34mroi_heads.mid_decoder.predictor.weight[0m
[34mroi_heads.mid_decoder.trident_convs.0.0.weight[0m
[34mroi_heads.mid_decoder.trident_convs.0.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.trident_convs.1.0.weight[0m
[34mroi_heads.mid_decoder.trident_convs.1.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.trident_convs.2.0.weight[0m
[34mroi_heads.mid_decoder.trident_convs.2.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.trident_convs.3.0.weight[0m
[34mroi_heads.mid_decoder.trident_convs.3.1.{bias, weight}[0m
[01/19 16:51:00] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mroi_heads.keypoint_predictor.predictor.0.{bias, weight}[0m
  [35mroi_heads.densepose_head.body_conv_fcn1.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn2.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn3.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn4.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn5.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn6.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn7.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn8.bias[0m
  [35mroi_heads.mid_decoder.p4.2.{bias, weight}[0m
  [35mroi_heads.mid_decoder.p5.2.{bias, weight}[0m
[01/19 16:51:00] detectron2.engine.train_loop INFO: Starting training from iteration 0
[01/19 16:51:16] detectron2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/home/sunjunyao/KTN/detectron2/engine/train_loop.py", line 140, in train
    self.run_step()
  File "/home/sunjunyao/KTN/detectron2/engine/train_loop.py", line 226, in run_step
    loss_dict = self.model(data)
  File "/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch/nn/parallel/distributed.py", line 705, in forward
    output = self.module(*inputs[0], **kwargs[0])
  File "/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sunjunyao/KTN/detectron2/modeling/meta_arch/rcnn.py", line 166, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sunjunyao/KTN/projects/KTNv2/densepose/roi_head.py", line 346, in forward
    losses.update(self._forward_densepose(features, instances))
  File "/home/sunjunyao/KTN/projects/KTNv2/densepose/roi_head.py", line 556, in _forward_densepose
    features = [self.mid_decoder(features)]
  File "/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sunjunyao/KTN/projects/KTNv2/densepose/roi_head.py", line 161, in forward
    x = self.predictor(x)
  File "/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sunjunyao/KTN/detectron2/layers/wrappers.py", line 94, in forward
    x = super().forward(x)
  File "/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch/nn/modules/conv.py", line 399, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch/nn/modules/conv.py", line 396, in _conv_forward
    self.padding, self.dilation, self.groups)
RuntimeError: CUDA out of memory. Tried to allocate 202.00 MiB (GPU 2; 10.92 GiB total capacity; 9.83 GiB already allocated; 57.00 MiB free; 10.06 GiB reserved in total by PyTorch)
[01/19 16:51:16] detectron2.engine.hooks INFO: Total training time: 0:00:15 (0:00:00 on hooks)
[01/19 16:53:07] detectron2 INFO: Rank of current process: 2. World size: 4
[01/19 16:53:08] detectron2 INFO: Environment info:
----------------------  ------------------------------------------------------------------------
sys.platform            linux
Python                  3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56) [GCC 7.2.0]
numpy                   1.14.3
detectron2              0.2 @/home/sunjunyao/KTN/detectron2
Compiler                GCC 5.4
CUDA compiler           CUDA 10.2
detectron2 arch flags   sm_61
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.0 @/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             GeForce GTX 1080 Ti
CUDA_HOME               /usr/local/cuda
Pillow                  8.0.1
torchvision             0.9.0 @/home/sunjunyao/anaconda3/lib/python3.6/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
fvcore                  0.1.5.post20211023
cv2                     4.5.5
----------------------  ------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2018.0.2 Product Build 20180127 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[01/19 16:53:08] detectron2 INFO: Command line arguments: Namespace(config_file='projects/KTNv2/configs/densepose_rcnn_R_50_KTNv2.yaml', dist_url='tcp://127.0.0.1:50174', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', 'work_dirs/densepose_rcnn_R_50_KTNv2'], resume=False)
[01/19 16:53:08] detectron2 INFO: Contents of args.config_file=projects/KTNv2/configs/densepose_rcnn_R_50_KTNv2.yaml:
_BASE_: "./Base-DensePose-RCNN-FPN.yaml"
MODEL:
  KEYPOINT_ON: True 
  DENSEPOSE_ON: True
  WEIGHTS: "./pretrained_weights/R50-MIDv2-kpt.pth"
  ROI_HEADS:
    NAME: "DensePoseKTNv2Heads"
  ROI_DENSEPOSE_HEAD:
    NAME: "DensePoseKTNHead"
    PREDICTOR: "DensePoseKTNv2PredictorV3"
    KPT_ON: True
    KPT_CLASSIFIER_WEIGHT_DIR: "pretrained_weights/KTN_models/keypoints_kpt_classifier_weights.pkl"
    KPT_SURF_RELATION_DIR: "pretrained_weights/KTN_models/kpt_surface_relationships.pkl"
    POOLER_RESOLUTION: 28
    HEATMAP_SIZE: 112
    UP_SCALE: 2
    KPT_UP_SCALE: 2
    INDEX_WEIGHTS: 2.0
    FG_IOU_THRESHOLD: 0.65
    FG_MASK_THRESHOLD: 0.3
    DECODER_MULTI_SCALE_ON: True
  ROI_KEYPOINT_HEAD:
    LOSS_WEIGHT: 0.1
SOLVER:
  # MAX_ITER: 130000
  # STEPS: (100000, 120000)
  # IMS_PER_BATCH: 16
  # BASE_LR: 0.01
  MAX_ITER: 260000
  STEPS: (200000, 240000)
  IMS_PER_BATCH: 8
  BASE_LR: 0.005
  CHECKPOINT_PERIOD: 10000

DATASETS:
  TRAIN: ("densepose_coco_2014_train", "densepose_coco_2014_valminusminival",)

VERSION: 2
[01/19 16:53:08] detectron2 INFO: Running with full config:
BOOTSTRAP_DATASETS: []
BOOTSTRAP_MODEL:
  DEVICE: cuda
  WEIGHTS: 
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  CATEGORY_MAPS:
    
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('densepose_coco_2014_minival',)
  TRAIN: ('densepose_coco_2014_train', 'densepose_coco_2014_valminusminival')
  WHITELISTED_CATEGORIES:
    
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  ROTATION_ANGLES: [0]
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DENSEPOSE_ON: True
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  HRNET:
    HRFPN:
      OUT_CHANNELS: 256
    STAGE2:
      BLOCK: BASIC
      FUSE_METHOD: SUM
      NUM_BLOCKS: [4, 4]
      NUM_BRANCHES: 2
      NUM_CHANNELS: [32, 64]
      NUM_MODULES: 1
    STAGE3:
      BLOCK: BASIC
      FUSE_METHOD: SUM
      NUM_BLOCKS: [4, 4, 4]
      NUM_BRANCHES: 3
      NUM_CHANNELS: [32, 64, 128]
      NUM_MODULES: 4
    STAGE4:
      BLOCK: BASIC
      FUSE_METHOD: SUM
      NUM_BLOCKS: [4, 4, 4, 4]
      NUM_BRANCHES: 4
      NUM_CHANNELS: [32, 64, 128, 256]
      NUM_MODULES: 3
    STEM_INPLANES: 64
  KEYPOINT_ON: True
  LOAD_PROPOSALS: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    SCALE: 4
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_DENSEPOSE_HEAD:
    BODY_MASK_WEIGHTS: 5.0
    COARSE_SEGM_TRAINED_BY_MASKS: False
    CONV_HEAD_DIM: 512
    CONV_HEAD_KERNEL: 3
    DECODER_COMMON_STRIDE: 4
    DECODER_CONV_DIMS: 256
    DECODER_MULTI_SCALE_ON: True
    DECODER_NORM: 
    DECODER_NUM_CLASSES: 256
    DECODER_ON: True
    DECONV_KERNEL: 4
    DEEPLAB:
      NONLOCAL_ON: 0
      NORM: GN
    FG_IOU_THRESHOLD: 0.65
    FG_MASK_THRESHOLD: 0.3
    HEATMAP_SIZE: 112
    INDEX_WEIGHTS: 2.0
    KPT_CLASSIFIER_WEIGHT_DIR: pretrained_weights/KTN_models/keypoints_kpt_classifier_weights.pkl
    KPT_ON: True
    KPT_SURF_RELATION_DIR: pretrained_weights/KTN_models/kpt_surface_relationships.pkl
    KPT_UP_SCALE: 2
    LOWRES_LOSS:
      ENABLED: False
      LOWRES_WEIGHTS: 0.1
    MIXUP:
      ALPHA: 0.5
      ENABLED: False
      WEIGHTS_DECAY: 0.01
    NAME: DensePoseKTNHead
    NUM_COARSE_SEGM_CHANNELS: 2
    NUM_PATCHES: 24
    NUM_STACKED_CONVS: 8
    PART_WEIGHTS: 1.0
    POINT_REGRESSION_WEIGHTS: 0.01
    POOLER_RESOLUTION: 28
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
    PREDICTOR: DensePoseKTNv2PredictorV3
    RES2:
      GN: False
      SCALE: 4
    SEGM_CONFIDENCE:
      ENABLED: False
      EPSILON: 0.01
    TRIPLET_LOSS:
      ENABLED: False
      MARGIN: 1.0
      USE_XY_DIST: False
      WEIGHTS: 0.1
    UP_SCALE: 2
    UV_CONFIDENCE:
      ENABLED: False
      EPSILON: 0.01
      TYPE: iid_iso
    UV_LOSS_WITH_WEIGHTS:
      U:
        ENABLED: False
        W0: 3
        W1: 3
        X1: 0.1
        X2: 0.7
      V:
        ENABLED: False
        W0: 6
        W1: 4
        X1: 0.2
        X2: 0.8
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: DensePoseKTNv2Heads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 1
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 0.1
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: ./pretrained_weights/R50-MIDv2-kpt.pth
OUTPUT_DIR: work_dirs/densepose_rcnn_R_50_KTNv2
SEED: -1
SOLVER:
  BASE_LR: 0.005
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 10000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 260000
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (200000, 240000)
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
    ROTATION_ANGLES: ()
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[01/19 16:53:08] detectron2.utils.env INFO: Using a generated random seed 8598265
[01/19 16:53:15] detectron2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): DensePoseKTNv2Heads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=2, aligned=False)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=2, aligned=False)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=2, aligned=False)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=2, aligned=False)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (decoder): None
    (densepose_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=2, aligned=False)
      )
    )
    (densepose_head): DensePoseKTNHead(
      (ScaleConvs): ScaleConvs(
        (conv1): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (norms): ModuleList(
          (0): GroupNorm(32, 256, eps=1e-05, affine=True)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (project): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU()
        )
      )
      (ScaleConv): ScaleConvs(
        (conv1): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (norms): ModuleList(
          (0): GroupNorm(32, 256, eps=1e-05, affine=True)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (project): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU()
        )
      )
      (body_conv_fcn1): Conv2d(
        256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn2): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn3): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn4): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn5): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn6): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn7): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (body_conv_fcn8): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
    )
    (densepose_predictor): DensePoseKTNv2PredictorV3(
      (i_lowres): ConvTranspose2d(512, 25, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (u_lowres): ConvTranspose2d(512, 25, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (v_lowres): ConvTranspose2d(512, 25, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (ann_index_lowres): ConvTranspose2d(512, 15, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (m_lowres): ConvTranspose2d(512, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (parameter_transformer): Sequential(
        (0): Linear(in_features=17408, out_features=8192, bias=True)
        (1): LeakyReLU(negative_slope=0.02)
        (2): Linear(in_features=8192, out_features=8192, bias=True)
      )
    )
    (mid_decoder): MultiInstanceDecoder(
      (bottom_up_p2): FeatureAdaptation(
        (adt_conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (bottom_up_p3): FeatureAdaptation(
        (adt_conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (bottom_up_p4): FeatureAdaptation(
        (adt_conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (p2): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (p3): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (2): PixelShuffle(upscale_factor=2)
      )
      (p4): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (2): PixelShuffle(upscale_factor=2)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (5): PixelShuffle(upscale_factor=2)
      )
      (p5): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (2): PixelShuffle(upscale_factor=2)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (5): PixelShuffle(upscale_factor=2)
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (8): PixelShuffle(upscale_factor=2)
      )
      (trident_convs): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (1): ASPPConv(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (2): ASPPConv(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
        (3): ASPPConv(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
        )
      )
      (predictor): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[01/19 16:53:15] densepose.data.dataset_mapper INFO: DensePose-specific augmentation used in training: RandomRotation(angle=[0], expand=False, sample_style='choice')
[01/19 16:53:34] densepose.data.datasets.coco INFO: Loading datasets/coco/annotations/densepose_train2014.json takes 18.33 seconds.
[01/19 16:53:34] densepose.data.datasets.coco INFO: Dataset densepose_coco_2014_train categories: [{'supercategory': 'person', 'id': 1, 'name': 'person', 'keypoints': ['nose', 'left_eye', 'right_eye', 'left_ear', 'right_ear', 'left_shoulder', 'right_shoulder', 'left_elbow', 'right_elbow', 'left_wrist', 'right_wrist', 'left_hip', 'right_hip', 'left_knee', 'right_knee', 'left_ankle', 'right_ankle'], 'skeleton': [[16, 14], [14, 12], [17, 15], [15, 13], [12, 13], [6, 12], [7, 13], [6, 7], [6, 8], [7, 9], [8, 10], [9, 11], [2, 3], [1, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7]]}]
[01/19 16:53:34] densepose.data.datasets.coco INFO: Loaded 26437 images in COCO format from datasets/coco/annotations/densepose_train2014.json
[01/19 16:53:43] densepose.data.datasets.coco INFO: Loading datasets/coco/annotations/densepose_valminusminival2014.json takes 4.91 seconds.
[01/19 16:53:43] densepose.data.datasets.coco INFO: Dataset densepose_coco_2014_valminusminival categories: [{'supercategory': 'person', 'id': 1, 'keypoints': ['nose', 'left_eye', 'right_eye', 'left_ear', 'right_ear', 'left_shoulder', 'right_shoulder', 'left_elbow', 'right_elbow', 'left_wrist', 'right_wrist', 'left_hip', 'right_hip', 'left_knee', 'right_knee', 'left_ankle', 'right_ankle'], 'name': 'person', 'skeleton': [[16, 14], [14, 12], [17, 15], [15, 13], [12, 13], [6, 12], [7, 13], [6, 7], [6, 8], [7, 9], [8, 10], [9, 11], [2, 3], [1, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7]]}]
[01/19 16:53:43] densepose.data.datasets.coco INFO: Loaded 5984 images in COCO format from datasets/coco/annotations/densepose_valminusminival2014.json
[01/19 16:53:46] detectron2.data.build INFO: Distribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
|   person   | 98816        |
|            |              |[0m
[01/19 16:53:47] detectron2.data.build INFO: Distribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
|   person   | 24640        |
|            |              |[0m
[01/19 16:53:48] detectron2.data.common INFO: Serializing 32421 elements to byte tensors and concatenating them all ...
[01/19 16:53:52] detectron2.data.common INFO: Serialized dataset takes 446.10 MiB
[01/19 16:53:52] densepose.data.build INFO: Using training sampler TrainingSampler
[01/19 16:53:54] fvcore.common.checkpoint INFO: [Checkpointer] Loading from ./pretrained_weights/R50-MIDv2-kpt.pth ...
[01/19 16:53:54] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mid_decoder.p5.4.weight' to the model due to incompatible shapes: (256, 256, 3, 3) in the checkpoint but (1024, 256, 1, 1) in the model! You might want to double check if this is expected.
[01/19 16:53:54] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mid_decoder.p5.4.bias' to the model due to incompatible shapes: (256,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[01/19 16:53:54] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mid_decoder.predictor.weight' to the model due to incompatible shapes: (256, 256, 1, 1) in the checkpoint but (256, 1024, 1, 1) in the model! You might want to double check if this is expected.
[01/19 16:53:54] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.densepose_head.ScaleConv.conv1.0.weight[0m
[34mroi_heads.densepose_head.ScaleConv.conv1.1.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConv.norms.0.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConv.norms.1.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConv.norms.2.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConv.project.0.weight[0m
[34mroi_heads.densepose_head.ScaleConv.weight[0m
[34mroi_heads.densepose_head.ScaleConvs.conv1.0.weight[0m
[34mroi_heads.densepose_head.ScaleConvs.conv1.1.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConvs.norms.0.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConvs.norms.1.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConvs.norms.2.{bias, weight}[0m
[34mroi_heads.densepose_head.ScaleConvs.project.0.weight[0m
[34mroi_heads.densepose_head.ScaleConvs.weight[0m
[34mroi_heads.densepose_head.body_conv_fcn1.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn2.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn3.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn4.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn5.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn6.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn7.norm.{bias, weight}[0m
[34mroi_heads.densepose_head.body_conv_fcn8.norm.{bias, weight}[0m
[34mroi_heads.densepose_predictor.ann_index_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.i_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.m_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.parameter_transformer.0.{bias, weight}[0m
[34mroi_heads.densepose_predictor.parameter_transformer.2.{bias, weight}[0m
[34mroi_heads.densepose_predictor.u_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.v_lowres.{bias, weight}[0m
[34mroi_heads.densepose_predictor.{bbox_surface_transfer_matrix, body_kpt_bias, body_kpt_weight, kpt_surface_transfer_matrix, part_surface_transfer_matrix}[0m
[34mroi_heads.mid_decoder.bottom_up_p2.adt_conv.{bias, weight}[0m
[34mroi_heads.mid_decoder.bottom_up_p3.adt_conv.{bias, weight}[0m
[34mroi_heads.mid_decoder.bottom_up_p4.adt_conv.{bias, weight}[0m
[34mroi_heads.mid_decoder.p3.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.p4.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.p4.3.{bias, weight}[0m
[34mroi_heads.mid_decoder.p4.4.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.3.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.4.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.6.{bias, weight}[0m
[34mroi_heads.mid_decoder.p5.7.{bias, weight}[0m
[34mroi_heads.mid_decoder.predictor.weight[0m
[34mroi_heads.mid_decoder.trident_convs.0.0.weight[0m
[34mroi_heads.mid_decoder.trident_convs.0.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.trident_convs.1.0.weight[0m
[34mroi_heads.mid_decoder.trident_convs.1.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.trident_convs.2.0.weight[0m
[34mroi_heads.mid_decoder.trident_convs.2.1.{bias, weight}[0m
[34mroi_heads.mid_decoder.trident_convs.3.0.weight[0m
[34mroi_heads.mid_decoder.trident_convs.3.1.{bias, weight}[0m
[01/19 16:53:54] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mroi_heads.keypoint_predictor.predictor.0.{bias, weight}[0m
  [35mroi_heads.densepose_head.body_conv_fcn1.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn2.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn3.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn4.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn5.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn6.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn7.bias[0m
  [35mroi_heads.densepose_head.body_conv_fcn8.bias[0m
  [35mroi_heads.mid_decoder.p4.2.{bias, weight}[0m
  [35mroi_heads.mid_decoder.p5.2.{bias, weight}[0m
[01/19 16:53:54] detectron2.engine.train_loop INFO: Starting training from iteration 0
